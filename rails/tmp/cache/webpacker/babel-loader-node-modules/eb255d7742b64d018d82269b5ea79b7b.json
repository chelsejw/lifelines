{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/chels/webdev/lifelines/app/javascript/packs/app/forms/AppealForm/AppealForm.jsx\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { trackInputData, postAppealForm, getFormRenderData, getEditFormData as _getEditFormData, trackEditFormInput, sendPatchAppealRequest } from './actions';\nimport BarLoader from \"react-spinners/BarLoader\";\nimport ErrorPage from '../../layouts/ErrorPage';\n\nvar AppealForm = function AppealForm(props) {\n  useEffect(function () {\n    props.getFormData(); //If this isn't the new appeal form, we want to get the original of the appeal we want to edit.\n\n    if (props.match.path !== \"/new/appeal\") {\n      props.getEditFormData(props.match.params.id);\n    }\n  }, []);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMessage = _useState4[0],\n      setErrorMessage = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      imgUrl = _useState6[0],\n      setImgUrl = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      uploadStatus = _useState8[0],\n      setUploadStatus = _useState8[1];\n\n  var isEditForm = props.match.path !== \"/new/appeal\";\n\n  var openWidget = function openWidget() {\n    cloudinary.openUploadWidget({\n      cloudName: \"dwbuqa4dx\",\n      uploadPreset: \"m7t9mejb\",\n      sources: [\"local\", \"url\"]\n    }, function (error, result) {\n      if (error) {\n        console.log(\"Err,\", error);\n        return setUploadStatus('failed');\n      }\n\n      if (result.event == \"success\") {\n        console.log(\"Result,\", result);\n        setImgUrl(result.info.url);\n        !isEditForm ? props.trackInput(result.info.url, \"img_url\") : props.trackEditInput(result.info.url, \"img_url\");\n        setUploadStatus('success');\n      }\n    });\n  };\n\n  if (isEditForm && props.appealForm.formData.user_id !== props.auth.currentUser.user.id) {\n    return /*#__PURE__*/React.createElement(ErrorPage, {\n      message: \"You are not authorised to edit this appeal\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 18\n      }\n    });\n  }\n\n  var clinicOptions = props.appealForm.formData.clinics.map(function (clinic, index) {\n    if (isEditForm && clinic.id == props.appealForm.edit.defaultSelect.clinic.id) {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        selected: \"selected\",\n        key: clinic.id,\n        value: clinic.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 20\n        }\n      }, clinic.name);\n    } else if (index == 0) {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        selected: \"selected\",\n        key: clinic.id,\n        value: clinic.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 19\n        }\n      }, clinic.name);\n    }\n\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: clinic.id,\n      value: clinic.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 20\n      }\n    }, clinic.name);\n  });\n  var speciesOptions = props.appealForm.formData.species.map(function (species, index) {\n    if (isEditForm && species.id == props.appealForm.edit.defaultSelect.species.id) {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        selected: \"selected\",\n        key: species.id,\n        value: species.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 19\n        }\n      }, species.name);\n    } else if (index == 0) {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        selected: \"selected\",\n        key: species.id,\n        value: species.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 24\n        }\n      }, species.name, \" \");\n    }\n\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: species.id,\n      value: species.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 20\n      }\n    }, species.name);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"jumbotron bg-white\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container w-50\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"mb-4 text-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, isEditForm ? \"Editing Appeal\" : \"Post An Appeal\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, \"A description and image is optional, but it can go a long way in influencing people to help out, or spread the appeal! Please be cautious about including personal details like your mobile number in the description.\"), /*#__PURE__*/React.createElement(\"form\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row my-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col p-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"inputPet\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, \"Pet's Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form-control\",\n    defaultValue: isEditForm ? props.appealForm.edit.editInput.pet_name : \"\",\n    id: \"inputPet\",\n    placeholder: \"Pet's Name\",\n    onChange: function onChange(e) {\n      isEditForm ? props.trackEditInput(e.target.value, e.target.name) : props.trackInput(e.target.value, e.target.name);\n    },\n    value: isEditForm ? props.appealForm.edit.editInput.pet_name : props.appealForm.inputData.pet_name,\n    required: true,\n    name: \"pet_name\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row my-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col p-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"input\", {\n    required: true,\n    id: \"description\",\n    className: \"form-control\",\n    value: isEditForm ? props.appealForm.edit.editInput.description : props.appealForm.inputData.description,\n    placeholder: \"Description\",\n    onChange: function onChange(e) {\n      props.trackInput(e.target.value, e.target.name);\n    },\n    name: \"description\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row my-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col p-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"clinic\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }, \"Clinic\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"clinic\",\n    className: \"form-control\",\n    onChange: function onChange(e) {\n      isEditForm ? props.trackEditInput(e.target.value, e.target.name) : props.trackInput(e.target.value, e.target.name);\n    },\n    defaultValue: {\n      value: 338,\n      label: \"Clinic\"\n    },\n    name: \"clinic_id\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }, clinicOptions)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"species\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  }, \"Species\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"species\",\n    className: \"form-control\",\n    onChange: function onChange(e) {\n      isEditForm ? props.trackEditInput(e.target.value, e.target.name) : props.trackInput(e.target.value, e.target.name);\n    },\n    name: \"species_id\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  }, speciesOptions))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row my-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col p-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"imgInput\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 21\n    }\n  }, \"Image\", /*#__PURE__*/React.createElement(\"span\", {\n    onClick: openWidget,\n    className: \"btn-link btn-sm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 23\n    }\n  }, \"Upload\")), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form-control\",\n    name: \"img_url\",\n    disabled: \"disabled\",\n    id: \"imgInput\",\n    value: imgUrl,\n    placeholder: \"Use the upload button!\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }))), isEditForm && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row my-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-4 p-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    \"for\": \"status\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 23\n    }\n  }, \"Status\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"status\",\n    className: \"form-control\",\n    onChange: function onChange(e) {\n      isEditForm ? props.trackEditInput(e.target.value, e.target.name) : props.trackInput(e.target.value, e.target.name);\n    },\n    name: \"status\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"open\",\n    selected: props.appealForm.edit.editInput.status == \"open\" ? \"selected\" : \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 25\n    }\n  }, \"Open\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"closed\",\n    selected: props.appealForm.edit.editInput.status == \"closed\" ? \"selected\" : \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 25\n    }\n  }, \"Closed\")))), props.appealForm.isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-100\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(BarLoader, {\n    width: 100,\n    color: \"#123abc\",\n    height: 8,\n    loading: props.appealForm.isLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 21\n    }\n  })), error && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-danger py-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 27\n    }\n  }, errorMessage), props.appealForm.postSuccess && !isEditForm && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-success py-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 19\n    }\n  }, \"We have successfully posted your appeal for\", \" \", props.appealForm.data.pet_name, \"! Check it out at\", \" \", /*#__PURE__*/React.createElement(Link, {\n    className: \"btn-link\",\n    to: \"/appeals/\".concat(props.appealForm.data.id),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 21\n    }\n  }, \"this link\"), \".\"), props.appealForm.patch.submitted && \"Successfully updated!\", props.appealForm.hasErrored && \"Sorry, an error has occured.\", props.appealForm.edit.hasErrored && \"Sorry, an error has occured. Error (\".concat(props.appealForm.edit.errorDetails.statusCode, \"): \").concat(props.appealForm.edit.errorDetails.statusText), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row my-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-lg btn-danger btn-block\",\n    onClick: function onClick(e) {\n      e.preventDefault();\n      setError(false);\n\n      if (isEditForm) {\n        if (!props.appealForm.edit.editInput.pet_name || props.appealForm.edit.editInput.pet_name.length < 2) {\n          setError(true);\n          return setErrorMessage(\"Pet's name is blank or too short (minimum 2 characters long).\");\n        }\n\n        return props.patch(props.appealForm.edit.editInput, props.appealForm.edit.editInput.id);\n      }\n\n      if (!props.appealForm.inputData.pet_name || props.appealForm.inputData.pet_name.length < 2) {\n        setError(true);\n        return setErrorMessage(\"Pet's name is blank or too short (minimum 2 characters long).\");\n      }\n\n      return props.post(props.appealForm.inputData, props.auth.currentUser.id);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 19\n    }\n  }, \"Submit\")))));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    appealForm: state.appealForm,\n    auth: state.auth\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    trackInput: function trackInput(input, field) {\n      console.log(\"track input triggered for \".concat(field));\n      dispatch(trackInputData(input, field));\n    },\n    trackEditInput: function trackEditInput(input, field) {\n      dispatch(trackEditFormInput(input, field));\n    },\n    post: function post(payload, userId) {\n      console.log(\"posting\");\n      console.log(\"payload\", payload);\n      dispatch(postAppealForm(payload, userId));\n    },\n    patch: function patch(payload, id) {\n      console.log(\"in patch function\");\n      console.log(\"initial payload is \".concat(payload));\n      dispatch(sendPatchAppealRequest(payload, id));\n    },\n    getFormData: function getFormData() {\n      dispatch(getFormRenderData());\n    },\n    getEditFormData: function getEditFormData(appealId) {\n      dispatch(_getEditFormData(appealId));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppealForm);","map":{"version":3,"sources":["/Users/chels/webdev/lifelines/app/javascript/packs/app/forms/AppealForm/AppealForm.jsx"],"names":["React","useState","useEffect","connect","Link","trackInputData","postAppealForm","getFormRenderData","getEditFormData","trackEditFormInput","sendPatchAppealRequest","BarLoader","ErrorPage","AppealForm","props","getFormData","match","path","params","id","error","setError","errorMessage","setErrorMessage","imgUrl","setImgUrl","uploadStatus","setUploadStatus","isEditForm","openWidget","cloudinary","openUploadWidget","cloudName","uploadPreset","sources","result","console","log","event","info","url","trackInput","trackEditInput","appealForm","formData","user_id","auth","currentUser","user","clinicOptions","clinics","map","clinic","index","edit","defaultSelect","name","speciesOptions","species","editInput","pet_name","e","target","value","inputData","description","label","status","isLoading","postSuccess","data","patch","submitted","hasErrored","errorDetails","statusCode","statusText","preventDefault","length","post","mapStateToProps","state","mapDispatchToProps","dispatch","input","field","payload","userId","appealId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux';\nimport {Link} from 'react-router-dom'\nimport { trackInputData, postAppealForm, getFormRenderData, getEditFormData, trackEditFormInput, sendPatchAppealRequest } from './actions'\nimport BarLoader from \"react-spinners/BarLoader\";\nimport ErrorPage from '../../layouts/ErrorPage'\n\nconst AppealForm = (props) => {\n\n  useEffect(()=> {\n        props.getFormData();\n        \n        //If this isn't the new appeal form, we want to get the original of the appeal we want to edit.\n        if ( props.match.path!==\"/new/appeal\") {\n            props.getEditFormData(props.match.params.id)\n        }\n\n  }, [])\n \n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\")\n  const [imgUrl, setImgUrl] = useState(\"\")\n  const [uploadStatus, setUploadStatus] = useState(\"\")\n  const isEditForm = props.match.path !== \"/new/appeal\";\n\n  const openWidget = () => {\n\n        cloudinary.openUploadWidget({\n                cloudName: \"dwbuqa4dx\",\n                uploadPreset: \"m7t9mejb\",\n                sources: [\"local\", \"url\"],\n            },\n            (error, result) => {\n                if (error) {\n                    console.log(`Err,`, error)\n                    return setUploadStatus('failed');\n                }\n                if (result.event == \"success\") {\n                    console.log(`Result,`, result);\n                    setImgUrl(result.info.url);\n                    !isEditForm\n                      ? props.trackInput(result.info.url, \"img_url\")\n                      : props.trackEditInput(result.info.url, \"img_url\");\n                    setUploadStatus('success')\n\n\n                }\n            }\n        );\n    }\n\n        if (isEditForm && props.appealForm.formData.user_id!==props.auth.currentUser.user.id){\n          return <ErrorPage message=\"You are not authorised to edit this appeal\"/>\n        }\n\n        const clinicOptions = props.appealForm.formData.clinics.map((clinic,index)=> {\n            if (isEditForm && clinic.id==props.appealForm.edit.defaultSelect.clinic.id) {\n            return <option selected=\"selected\" key={clinic.id} value={clinic.id}>{clinic.name}</option>;\n            }\n            else if (index==0) {\n                return (\n                  <option selected=\"selected\" key={clinic.id} value={clinic.id}>\n                    {clinic.name}\n                  </option>\n                );\n            } \n            return <option key={clinic.id} value={clinic.id}>{clinic.name}</option>\n        })\n\n        const speciesOptions = props.appealForm.formData.species.map((species, index)=> {\n            if (isEditForm && species.id==props.appealForm.edit.defaultSelect.species.id) {\n                return (\n                  <option selected=\"selected\" key={species.id} value={species.id}>{species.name}</option>\n                );\n            } else if (index==0) {\n                return <option selected=\"selected\" key={species.id} value={species.id}>{species.name} </option>\n            }\n            return <option key={species.id} value={species.id}>{species.name}</option>\n        })\n        \n        \n        \n        return (\n          <div className=\"jumbotron bg-white\">\n            <div className=\"container w-50\">\n              <h2 className=\"mb-4 text-center\">\n                {isEditForm ? \"Editing Appeal\" : \"Post An Appeal\"}\n              </h2>\n\n              <p className=\"text-center\">\n                A description and image is optional, but it can go a long way in\n                influencing people to help out, or spread the appeal! Please be\n                cautious about including personal details like your mobile\n                number in the description.\n              </p>\n\n              <form>\n                <div className=\"row my-4\">\n                  <div className=\"col p-0\">\n                    <label htmlFor=\"inputPet\">Pet's Name</label>\n                    <input\n                      className=\"form-control\"\n                      defaultValue={\n                        isEditForm\n                          ? props.appealForm.edit.editInput.pet_name\n                          : \"\"\n                      }\n                      id=\"inputPet\"\n                      placeholder=\"Pet's Name\"\n                      onChange={(e) => {\n                        isEditForm\n                          ? props.trackEditInput(e.target.value, e.target.name)\n                          : props.trackInput(e.target.value, e.target.name);\n                      }}\n                      value={\n                        isEditForm\n                          ? props.appealForm.edit.editInput.pet_name\n                          : props.appealForm.inputData.pet_name\n                      }\n                      required\n                      name=\"pet_name\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"row my-2\">\n                  <div className=\"col p-0\">\n                    <label htmlFor=\"description\">Description</label>\n\n                    <input\n                      required\n                      id=\"description\"\n                      className=\"form-control\"\n                      value={\n                        isEditForm\n                          ? props.appealForm.edit.editInput.description\n                          : props.appealForm.inputData.description\n                      }\n                      placeholder=\"Description\"\n                      onChange={(e) => {\n                        props.trackInput(e.target.value, e.target.name);\n                      }}\n                      name=\"description\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"row my-4\">\n                  <div className=\"col p-0\">\n                    <label htmlFor=\"clinic\">Clinic</label>\n                    <select\n                      id=\"clinic\"\n                      className=\"form-control\"\n                      onChange={(e) => {\n                        isEditForm\n                          ? props.trackEditInput(e.target.value, e.target.name)\n                          : props.trackInput(e.target.value, e.target.name);\n                      }}\n                      defaultValue={{ value: 338, label: \"Clinic\" }}\n                      name=\"clinic_id\"\n                    >\n                      {clinicOptions}\n                    </select>\n                  </div>\n                  <div className=\"col\">\n                    <label htmlFor=\"species\">Species</label>\n\n                    <select\n                      id=\"species\"\n                      className=\"form-control\"\n                      onChange={(e) => {\n                        isEditForm\n                          ? props.trackEditInput(e.target.value, e.target.name)\n                          : props.trackInput(e.target.value, e.target.name);\n                      }}\n                      name=\"species_id\"\n                    >\n                      {speciesOptions}\n                    </select>\n                  </div>\n                </div>\n\n                <div className=\"row my-4\">\n                  <div className=\"col p-0\">\n                    <label htmlFor=\"imgInput\">\n                      Image\n                      <span onClick={openWidget} className=\"btn-link btn-sm\">\n                        Upload\n                      </span>\n                    </label>\n                    <input\n                      className=\"form-control\"\n                      name=\"img_url\"\n                      disabled=\"disabled\"\n                      id=\"imgInput\"\n                      value={imgUrl}\n                      placeholder=\"Use the upload button!\"\n                    />\n                  </div>\n                </div>\n\n                {isEditForm && (\n                  <div className=\"row my-4\">\n                    <div className=\"col-4 p-0\">\n                      <label for=\"status\">Status</label>\n\n                      <select\n                        id=\"status\"\n                        className=\"form-control\"\n                        onChange={(e) => {\n                          isEditForm\n                            ? props.trackEditInput(\n                                e.target.value,\n                                e.target.name\n                              )\n                            : props.trackInput(e.target.value, e.target.name);\n                        }}\n                        name=\"status\"\n                      >\n                        <option\n                          value=\"open\"\n                          selected={\n                            props.appealForm.edit.editInput.status == \"open\"\n                              ? \"selected\"\n                              : \"\"\n                          }\n                        >\n                          Open\n                        </option>\n                        <option\n                          value=\"closed\"\n                          selected={\n                            props.appealForm.edit.editInput.status == \"closed\"\n                              ? \"selected\"\n                              : \"\"\n                          }\n                        >\n                          Closed\n                        </option>\n                      </select>\n                    </div>\n                  </div>\n                )}\n                {props.appealForm.isLoading && (\n                  <div className=\"w-100\">\n                    <BarLoader\n                      width={100}\n                      color={\"#123abc\"}\n                      height={8}\n                      loading={props.appealForm.isLoading}\n                    />\n                  </div>\n                )}\n\n                {error && <p className=\"text-danger py-3\">{errorMessage}</p>}\n                {props.appealForm.postSuccess && !isEditForm && (\n                  <p className=\"text-success py-3\">\n                    We have successfully posted your appeal for{\" \"}\n                    {props.appealForm.data.pet_name}! Check it out at{\" \"}\n                    <Link\n                      className=\"btn-link\"\n                      to={`/appeals/${props.appealForm.data.id}`}\n                    >\n                      this link\n                    </Link>\n                    .\n                  </p>\n                )}\n                {props.appealForm.patch.submitted && \"Successfully updated!\"}\n\n                {props.appealForm.hasErrored && \"Sorry, an error has occured.\"}\n\n                {props.appealForm.edit.hasErrored &&\n                  `Sorry, an error has occured. Error (${props.appealForm.edit.errorDetails.statusCode}): ${props.appealForm.edit.errorDetails.statusText}`}\n\n                <div className=\"row my-4\">\n                  <button\n                    type=\"submit\"\n                    className=\"btn btn-lg btn-danger btn-block\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      setError(false);\n                      if (isEditForm) {\n                        if (\n                          !props.appealForm.edit.editInput.pet_name ||\n                          props.appealForm.edit.editInput.pet_name.length < 2\n                        ) {\n                          setError(true);\n                          return setErrorMessage(\n                            \"Pet's name is blank or too short (minimum 2 characters long).\"\n                          );\n                        }\n                        return props.patch(\n                          props.appealForm.edit.editInput,\n                          props.appealForm.edit.editInput.id\n                        );\n                      }\n                      if (\n                        !props.appealForm.inputData.pet_name ||\n                        props.appealForm.inputData.pet_name.length < 2\n                      ) {\n                        setError(true);\n                        return setErrorMessage(\n                          \"Pet's name is blank or too short (minimum 2 characters long).\"\n                        );\n                      }\n                      return props.post(\n                        props.appealForm.inputData,\n                        props.auth.currentUser.id\n                      );\n                    }}\n                  >\n                    Submit\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        );\n      }\n\n\n\n\nconst mapStateToProps = (state) => {\n    return {\n        appealForm: state.appealForm,\n        auth: state.auth\n    };\n  };\n  const mapDispatchToProps = (dispatch) => {\n    return {\n        trackInput: (input, field) => {\n            console.log(`track input triggered for ${field}`)\n            dispatch(trackInputData(input,field));\n        },\n        trackEditInput: (input, field) => {\n            dispatch(trackEditFormInput(input,field))\n        },\n        post: (payload, userId)=> {\n            console.log(`posting`)\n            console.log(`payload`, payload)\n            dispatch(postAppealForm(payload, userId))\n        },\n        patch: (payload, id) => {\n          console.log(`in patch function`)\n          console.log(`initial payload is ${payload}`)\n            dispatch(sendPatchAppealRequest(payload, id))\n        },\n        getFormData: ()=> {\n            dispatch(getFormRenderData())\n        },\n        getEditFormData: (appealId) => {\n            dispatch(getEditFormData(appealId))\n        }\n    };\n  };\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(AppealForm);"]},"metadata":{},"sourceType":"module"}