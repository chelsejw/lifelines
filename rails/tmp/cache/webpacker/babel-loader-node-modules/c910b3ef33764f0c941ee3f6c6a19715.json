{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar appealsFormReducer = function appealsFormReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    data: [{\n      species_id: \"\",\n      pet_name: \"\",\n      clinic_id: \"\",\n      description: \"\",\n      img_url: \"\"\n    }],\n    postSuccess: false,\n    isLoading: false,\n    hasErrored: false,\n    inputData: {},\n    formData: {\n      clinics: [],\n      species: [],\n      user_id: \"\"\n    },\n    isEditing: false,\n    edit: {\n      defaultSelect: {\n        isLoaded: false,\n        clinic: {\n          id: \"\",\n          name: \"\"\n        },\n        species: {\n          id: \"\",\n          name: \"\"\n        }\n      },\n      editInput: {\n        species_id: \"\",\n        pet_name: \"\",\n        clinic_id: \"\",\n        description: \"\",\n        img_url: \"\",\n        species: {\n          id: \"\",\n          name: \"\"\n        },\n        clinic: {\n          id: \"\",\n          name: \"\"\n        },\n        user: {\n          id: \"\"\n        }\n      },\n      isLoading: false,\n      hasErrored: false,\n      errorDetails: {\n        statusCode: \"\",\n        statusText: \"\"\n      }\n    },\n    patch: {\n      data: {},\n      submitted: false,\n      isLoading: false,\n      hasErrored: false,\n      errorDetails: {\n        statusCode: \"\",\n        statusText: \"\"\n      }\n    }\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'APPEAL_POST_REQUEST_DATA_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: action.data\n      });\n\n    case 'APPEAL_POST_REQUEST_IS_LOADING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: action.isLoading\n      });\n\n    case 'TRACK_INPUT_DATA':\n      console.log(\"triggered normal track inpuit\");\n      return _objectSpread(_objectSpread({}, state), {}, {\n        inputData: _objectSpread(_objectSpread({}, state.inputData), {}, _defineProperty({}, action.field, action.input))\n      });\n\n    case 'APPEAL_POST_REQUEST_HAS_ERROR':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        hasErrored: action.hasErrored\n      });\n\n    case 'GET_FORM_FIELD_DATA':\n      var inputKey = 'species';\n\n      if (action.field == 'user_id') {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          formData: _objectSpread(_objectSpread({}, state.formData), {}, {\n            user_id: action.data\n          })\n        });\n      }\n\n      if (action.field == 'clinics') {\n        inputKey = 'clinic';\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        inputData: _objectSpread(_objectSpread({}, state.inputData), {}, _defineProperty({}, \"\".concat(inputKey, \"_id\"), parseInt(action.data[0].id))),\n        formData: _objectSpread(_objectSpread({}, state.formData), {}, _defineProperty({}, action.field, action.data))\n      });\n\n    case 'GET_EDIT_FORM_DATA_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        edit: _objectSpread(_objectSpread({}, state.edit), {}, {\n          editInput: _objectSpread(_objectSpread({}, action.data), {}, {\n            species_id: action.data.species.id,\n            clinic_id: action.data.clinic.id\n          }),\n          defaultSelect: {\n            isLoaded: true,\n            clinic: {\n              id: action.data.clinic.id,\n              name: action.data.clinic.name\n            },\n            species: {\n              id: action.data.species.id,\n              name: action.data.species.name\n            }\n          }\n        })\n      });\n\n    case 'GET_EDIT_FORM_DATA_HAS_ERROR':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        edit: _objectSpread(_objectSpread({}, state.edit), {}, {\n          hasErrored: action.hasErrored,\n          errorDetails: {\n            statusCode: action.statusCode,\n            statusText: action.statusText\n          }\n        })\n      });\n\n    case 'GET_EDIT_FORM_DATA_IS_LOADING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        edit: _objectSpread(_objectSpread({}, state.edit), {}, {\n          isLoading: action.isLoading\n        })\n      });\n\n    case 'TRACK_EDIT_FORM_INPUT':\n      console.log(\"triggered edit track inpuit\");\n      return _objectSpread(_objectSpread({}, state), {}, {\n        edit: _objectSpread(_objectSpread({}, state.edit), {}, {\n          editInput: _objectSpread(_objectSpread({}, state.edit.editInput), {}, _defineProperty({}, action.field, action.input))\n        })\n      });\n\n    case 'APPEAL_PATCH_REQUEST_IS_LOADING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        patch: _objectSpread(_objectSpread({}, state.patch), {}, {\n          isLoading: action.isLoading,\n          submitted: false\n        })\n      });\n\n    case 'APPEAL_PATCH_REQUEST_HAS_ERROR':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        patch: _objectSpread(_objectSpread({}, state.patch), {}, {\n          hasErrored: action.hasErrored,\n          errorDetails: {\n            statusCode: action.statusCode,\n            statusText: action.statusText\n          }\n        })\n      });\n\n    case 'APPEAL_PATCH_REQUEST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        patch: _objectSpread(_objectSpread({}, state.patch), {}, {\n          data: action.data,\n          submitted: true\n        })\n      });\n\n    case 'CLEAR_FORM':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        postSuccess: true,\n        inputData: {\n          pet_name: \"\",\n          description: \"\",\n          img_url: \"\"\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default appealsFormReducer;","map":{"version":3,"sources":["/Users/chels/webdev/lifelines/app/javascript/packs/app/forms/AppealForm/reducers/index.js"],"names":["appealsFormReducer","state","data","species_id","pet_name","clinic_id","description","img_url","postSuccess","isLoading","hasErrored","inputData","formData","clinics","species","user_id","isEditing","edit","defaultSelect","isLoaded","clinic","id","name","editInput","user","errorDetails","statusCode","statusText","patch","submitted","action","type","console","log","field","input","inputKey","parseInt"],"mappings":"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","sourcesContent":["const appealsFormReducer = (state = {\n    data: [{\n        species_id: \"\",\n        pet_name: \"\",\n        clinic_id: \"\",\n        description: \"\",\n        img_url: \"\"\n        }\n    ],\n    postSuccess: false,\n    isLoading: false,\n    hasErrored: false,\n    inputData: {},\n    formData: {\n        clinics: [],\n        species: [],\n        user_id: \"\"\n    },\n    isEditing: false,\n    edit: {\n        defaultSelect: {\n            isLoaded: false,\n            clinic: {\n                id: \"\",\n                name: \"\"\n            },\n            species: {\n                id: \"\",\n                name: \"\"\n            }\n        },\n        editInput: {\n            species_id: \"\",\n            pet_name: \"\",\n            clinic_id: \"\",\n            description: \"\",\n            img_url: \"\",\n            species: {\n                id: \"\",\n                name: \"\"\n            },\n            clinic: {\n                id: \"\",\n                name: \"\"\n            },\n            user: {\n                id: \"\"\n            }\n        },\n        isLoading: false,\n        hasErrored: false,\n        errorDetails: {\n            statusCode: \"\",\n            statusText: \"\"\n        }\n    },\n    patch: {\n        data: {},\n        submitted: false,\n        isLoading: false,\n        hasErrored: false,\n        errorDetails: {\n            statusCode: \"\",\n            statusText: \"\",\n        }\n    }\n}, action) => {\n    switch (action.type) {\n        case 'APPEAL_POST_REQUEST_DATA_SUCCESS':\n            return {\n                ...state,\n                data: action.data};\n        case 'APPEAL_POST_REQUEST_IS_LOADING':\n            return {\n                ...state,\n                isLoading: action.isLoading};\n        case 'TRACK_INPUT_DATA':\n            console.log(`triggered normal track inpuit`)\n            return {\n                ...state,\n                inputData: {\n                    ...state.inputData,\n                    [action.field]: action.input\n                }\n            }\n        case 'APPEAL_POST_REQUEST_HAS_ERROR':\n            return {\n                ...state,\n                hasErrored: action.hasErrored\n            };\n        case 'GET_FORM_FIELD_DATA':\n            let inputKey = 'species'\n\n            if (action.field=='user_id'){\n                return {\n                    ...state,\n                    formData: {\n                        ...state.formData,\n                        user_id: action.data\n                    }\n                }\n            }\n\n            if (action.field=='clinics'){\n                inputKey = 'clinic'\n            } \n\n            return {\n              ...state,\n              inputData: {\n                ...state.inputData,\n                [`${inputKey}_id`]: parseInt(action.data[0].id),\n              },\n              formData: {\n                ...state.formData,\n                [action.field]: action.data,\n              },\n            };\n        case 'GET_EDIT_FORM_DATA_SUCCESS':\n            return {\n                ...state,\n                edit: {\n                    ...state.edit,\n                    editInput: {\n                        ...action.data,\n                        species_id: action.data.species.id,\n                        clinic_id: action.data.clinic.id\n                    },\n                    defaultSelect: {\n                        isLoaded: true,\n                        clinic: {\n                            id: action.data.clinic.id,\n                            name: action.data.clinic.name\n                        },\n                        species: {\n                            id: action.data.species.id,\n                            name: action.data.species.name\n                    }\n                }\n            }\n        }\n        case 'GET_EDIT_FORM_DATA_HAS_ERROR':\n            return {\n                ...state,\n                edit: {\n                    ...state.edit,\n                    hasErrored: action.hasErrored,\n                    errorDetails: {\n                        statusCode: action.statusCode,\n                        statusText: action.statusText\n                    }\n                }\n            }\n        case 'GET_EDIT_FORM_DATA_IS_LOADING':\n            return {\n                ...state,\n                edit: {\n                    ...state.edit,\n                    isLoading: action.isLoading\n                }\n            }\n        case 'TRACK_EDIT_FORM_INPUT':\n            console.log(`triggered edit track inpuit`)\n\n            return {\n              ...state,\n              edit: {\n                ...state.edit,\n                editInput: {\n                  ...state.edit.editInput,\n                  [action.field]: action.input,\n                },\n              },\n            };\n        case 'APPEAL_PATCH_REQUEST_IS_LOADING':\n            return {\n                ...state,\n                patch: {\n                    ...state.patch,\n                    isLoading: action.isLoading,\n                    submitted: false\n                }\n            }\n            case 'APPEAL_PATCH_REQUEST_HAS_ERROR':\n                return {\n                    ...state,\n                    patch: {\n                        ...state.patch,\n                        hasErrored: action.hasErrored,\n                        errorDetails: {\n                            statusCode: action.statusCode,\n                            statusText: action.statusText\n                        }\n                    }\n                }\n            case 'APPEAL_PATCH_REQUEST_SUCCESS':\n                return {\n                    ...state,\n                    patch: {\n                        ...state.patch,\n                        data: action.data,\n                        submitted: true\n                    }\n                }\n            case 'CLEAR_FORM':\n                return {\n                    ...state,\n                    postSuccess: true,\n                    inputData: {\n                        pet_name: \"\",\n                        description: \"\",\n                        img_url: \"\"\n                    }\n                }\n        default:\n            return state;\n    }\n}\n\nexport default appealsFormReducer\n "]},"metadata":{},"sourceType":"module"}