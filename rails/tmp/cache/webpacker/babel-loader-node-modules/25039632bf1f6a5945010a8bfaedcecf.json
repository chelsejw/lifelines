{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar appealsReducer = function appealsReducer() {\n  var _focusedData;\n\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    data: [],\n    isLoading: false,\n    hasErrored: false,\n    focusedData: (_focusedData = {\n      id: \"\",\n      species: \"\",\n      clinic: \"\"\n    }, _defineProperty(_focusedData, \"species\", \"\"), _defineProperty(_focusedData, \"pet_name\", \"\"), _defineProperty(_focusedData, \"user\", \"\"), _focusedData),\n    focusedIsLoading: false,\n    focusedHasErrored: false,\n    focusedLifeline: {\n      isUserConnected: false\n    },\n    throwLifeline: {\n      data: {},\n      success: false\n    }\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'APPEALS_FETCH_DATA_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: action.data\n      });\n\n    case 'APPEALS_IS_LOADING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: action.isLoading\n      });\n\n    case 'APPEALS_HAS_ERROR':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        hasErrored: action.hasErrored\n      });\n\n    case 'FOCUSED_APPEAL_FETCH_DATA_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        focusedData: action.data\n      });\n\n    case 'FOCUSED_APPEAL_IS_LOADING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        focusedIsLoading: action.isLoading\n      });\n\n    case 'FOCUSED_APPEAL_HAS_ERROR':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        focusedHasErrored: action.hasErrored\n      });\n\n    case 'LIFELINES_FETCH_DATA_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        focusedLifeline: action.data\n      });\n\n    case 'THROW_LIFELINE_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        throwLifeline: {\n          data: action.data,\n          success: true\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default appealsReducer;","map":{"version":3,"sources":["/Users/chels/webdev/lifelines/app/javascript/packs/app/appeals/reducers/index.js"],"names":["appealsReducer","state","data","isLoading","hasErrored","focusedData","id","species","clinic","focusedIsLoading","focusedHasErrored","focusedLifeline","isUserConnected","throwLifeline","success","action","type"],"mappings":";;;;;;AAAA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,GAqBT;AAAA;;AAAA,MArBUC,KAqBV,uEArBkB;AAC5BC,IAAAA,IAAI,EAAE,EADsB;AAE5BC,IAAAA,SAAS,EAAE,KAFiB;AAG5BC,IAAAA,UAAU,EAAE,KAHgB;AAI5BC,IAAAA,WAAW;AACPC,MAAAA,EAAE,EAAE,EADG;AAEPC,MAAAA,OAAO,EAAE,EAFF;AAGPC,MAAAA,MAAM,EAAE;AAHD,gDAIC,EAJD,6CAKG,EALH,yCAMD,EANC,gBAJiB;AAY5BC,IAAAA,gBAAgB,EAAE,KAZU;AAa5BC,IAAAA,iBAAiB,EAAE,KAbS;AAc5BC,IAAAA,eAAe,EAAE;AACbC,MAAAA,eAAe,EAAE;AADJ,KAdW;AAiB5BC,IAAAA,aAAa,EAAE;AACXX,MAAAA,IAAI,EAAE,EADK;AAEXY,MAAAA,OAAO,EAAE;AAFE;AAjBa,GAqBlB;AAAA,MAAXC,MAAW;;AACV,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,4BAAL;AACI,6CACOf,KADP;AAEIC,QAAAA,IAAI,EAAEa,MAAM,CAACb;AAFjB;;AAGJ,SAAK,oBAAL;AACI,6CACOD,KADP;AAEIE,QAAAA,SAAS,EAAEY,MAAM,CAACZ;AAFtB;;AAGJ,SAAK,mBAAL;AACI,6CACOF,KADP;AAEIG,QAAAA,UAAU,EAAEW,MAAM,CAACX;AAFvB;;AAGJ,SAAK,mCAAL;AACI,6CACOH,KADP;AAEII,QAAAA,WAAW,EAAEU,MAAM,CAACb;AAFxB;;AAIJ,SAAK,2BAAL;AACI,6CACOD,KADP;AAEIQ,QAAAA,gBAAgB,EAAEM,MAAM,CAACZ;AAF7B;;AAGJ,SAAK,0BAAL;AACI,6CACOF,KADP;AAEIS,QAAAA,iBAAiB,EAAEK,MAAM,CAACX;AAF9B;;AAGJ,SAAK,8BAAL;AACI,6CACOH,KADP;AAEIU,QAAAA,eAAe,EAAEI,MAAM,CAACb;AAF5B;;AAGJ,SAAK,wBAAL;AACI,6CACOD,KADP;AAEIY,QAAAA,aAAa,EAAE;AACXX,UAAAA,IAAI,EAAEa,MAAM,CAACb,IADF;AAEXY,UAAAA,OAAO,EAAE;AAFE;AAFnB;;AAOJ;AACI,aAAOb,KAAP;AAvCR;AAyCH,CA/DD;;AAiEA,eAAeD,cAAf","sourcesContent":["const appealsReducer = (state = {\n    data: [],\n    isLoading: false,\n    hasErrored: false,\n    focusedData: {\n        id: \"\",\n        species: \"\",\n        clinic: \"\",\n        species:\"\",\n        pet_name: \"\",\n        user: \"\"\n    },\n    focusedIsLoading: false,\n    focusedHasErrored: false,\n    focusedLifeline: {\n        isUserConnected: false\n    },\n    throwLifeline: {\n        data: {},\n        success: false\n    }\n}, action) => {\n    switch (action.type) {\n        case 'APPEALS_FETCH_DATA_SUCCESS':\n            return {\n                ...state,\n                data: action.data};\n        case 'APPEALS_IS_LOADING':\n            return {\n                ...state,\n                isLoading: action.isLoading};\n        case 'APPEALS_HAS_ERROR':\n            return {\n                ...state,\n                hasErrored: action.hasErrored};\n        case 'FOCUSED_APPEAL_FETCH_DATA_SUCCESS':\n            return {\n                ...state,\n                focusedData: action.data\n            }\n        case 'FOCUSED_APPEAL_IS_LOADING':\n            return {\n                ...state,\n                focusedIsLoading: action.isLoading};\n        case 'FOCUSED_APPEAL_HAS_ERROR':\n            return {\n                ...state,\n                focusedHasErrored: action.hasErrored};\n        case 'LIFELINES_FETCH_DATA_SUCCESS':\n            return {\n                ...state,\n                focusedLifeline: action.data};\n        case 'THROW_LIFELINE_SUCCESS':\n            return {\n                ...state,\n                throwLifeline: {\n                    data: action.data,\n                    success: true\n                }\n            }\n        default:\n            return state;\n    }\n}\n\nexport default appealsReducer\n "]},"metadata":{},"sourceType":"module"}