{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/chels/webdev/lifelines/app/javascript/packs/app/dashboard/ClinicForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport BarLoader from 'react-spinners/BarLoader';\nvar token = document.querySelector(\"[name=csrf-token]\").content;\naxios.defaults.headers.common[\"X-CSRF-TOKEN\"] = token;\n\nvar ClinicForm = function ClinicForm(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMessage = _useState4[0],\n      setErrorMessage = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(\"Everything looks good! Processing your form...\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      loadingMessage = _useState8[0],\n      setloadingMessage = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      submitted = _useState10[0],\n      setSubmitted = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      success = _useState12[0],\n      setSuccess = _useState12[1];\n\n  var _useState13 = useState(\"\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      successMessage = _useState14[0],\n      setSuccessMessage = _useState14[1];\n\n  var _useState15 = useState({\n    authorizer_id: 30,\n    verification_for: 'clinic'\n  }),\n      _useState16 = _slicedToArray(_useState15, 2),\n      input = _useState16[0],\n      setInput = _useState16[1];\n\n  var trackInput = function trackInput(value, field) {\n    setInput(function (prevInput) {\n      return _objectSpread(_objectSpread({}, prevInput), {}, _defineProperty({}, field, value));\n    });\n  };\n\n  useEffect(function () {\n    console.log(input);\n  }, [input]);\n\n  var handleClick = function handleClick(e) {\n    e.preventDefault();\n    setError(false);\n\n    if (submitted) {\n      setError(true);\n      setSuccess(false);\n      return setErrorMessage(\"Sorry, you may not submit another request until your current one is reviewed.\");\n    }\n\n    if (!input.mobile || input.mobile.length < 8) {\n      setError(true);\n      return setErrorMessage(\"Please check that you gave a valid number.\");\n    }\n\n    axios.post(\"/api/v1/verifications\", {\n      verification: input\n    }).then(function (res) {\n      setLoading(false);\n      setSuccess(true);\n      setSubmitted(true);\n      setSuccessMessage(\"Your verification request has been received. Please allow the team up to 7 working days to get back to you.\");\n    })[\"catch\"](function (err) {\n      console.log(\"There was an error in posting\");\n      console.log(err);\n      setError(true);\n      setLoading(false);\n      setErrorMessage(\"Sorry, there was an error processing your request. Please try again, or contact us @ lifelines.team@gmail.com for additional support.\");\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"Request to be a Verified Clinic\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, \"As a verified clinic, you will need to assist in verification requests for your clients in our database.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"However, you will reap the following benefits:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, \"Appeals posted from your account will be more visible and trusted by users with a verified badge\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"Your clients will have more options to verify their donor eligibility\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, \"Play a part in saving more animals' lives!\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, \"For Lifelines to work effectively, we require the cooperation of as many veterinary clinics as possible. Hence, no matter how small your clinic is, we would love to partner up.\")), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, \"How do I verify my clinic?\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"We aim to make the process as easy as possible.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"Please check the following conditions:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"You are an AVS-registered veterinary centre\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, \"You are signed in with an email account associated with your business. This is what we will use to verify your account.\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"If you have fulfilled both conditions, leave a number at which we can contact you at, and click on the \\\"Verify My Account\\\" button below, and our team will try to verify you ASAP. If more information is required, we might call or email you. If not, your account should be verified in 5-7 working days.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row my-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"mobile\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, \"Contact Number\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"mobile\",\n    className: \"form-control\",\n    onChange: function onChange(e) {\n      return trackInput(e.target.value, \"mobile\");\n    },\n    name: \"mobile\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }))), error && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mt-3 text-danger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, errorMessage), loading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BarLoader, {\n    color: \"#F5A623\",\n    height: 4,\n    width: 100,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mt-3 text-warning\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, loadingMessage)), success && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mt-3 text-success\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, successMessage), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick(e) {\n      return handleClick(e);\n    },\n    className: \"btn btn-big btn-success btn-block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, \"Verify My Account\"));\n};\n\nexport default ClinicForm;","map":{"version":3,"sources":["/Users/chels/webdev/lifelines/app/javascript/packs/app/dashboard/ClinicForm.js"],"names":["React","useState","useEffect","axios","BarLoader","token","document","querySelector","content","defaults","headers","common","ClinicForm","props","error","setError","errorMessage","setErrorMessage","loading","setLoading","loadingMessage","setloadingMessage","submitted","setSubmitted","success","setSuccess","successMessage","setSuccessMessage","authorizer_id","verification_for","input","setInput","trackInput","value","field","prevInput","console","log","handleClick","e","preventDefault","mobile","length","post","verification","then","res","err","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from \"axios\";\nimport BarLoader from 'react-spinners/BarLoader'\nconst token = document.querySelector(\"[name=csrf-token]\").content;\naxios.defaults.headers.common[\"X-CSRF-TOKEN\"] = token;\n\nconst ClinicForm = (props)=> {\n       const [error, setError] = useState(false);\n       const [errorMessage, setErrorMessage] = useState(\"\");\n\n       const [loading, setLoading] = useState(false);\n       const [loadingMessage, setloadingMessage] = useState(\n         \"Everything looks good! Processing your form...\"\n       );\n       const [submitted, setSubmitted] = useState(false);\n       const [success, setSuccess] = useState(false);\n       const [successMessage, setSuccessMessage] = useState(\"\");\n    const [input, setInput] = useState({\n        authorizer_id: 30,\n        verification_for: 'clinic'\n    })\n\n    const trackInput = (value, field) => {\n        setInput(prevInput => {\n            return {\n                ...prevInput,\n                [field]: value\n            }\n        })\n    }\n\n    useEffect(()=> {\n        console.log(input)\n    }, [input])\n\n    const handleClick = (e)=> {\n\n      e.preventDefault();\n      setError(false);\n\n      if (submitted) {\n        setError(true);\n        setSuccess(false);\n        return setErrorMessage(\n          \"Sorry, you may not submit another request until your current one is reviewed.\"\n        );\n      }\n\n        if (!input.mobile || input.mobile.length < 8) {\n            setError(true)\n            return setErrorMessage(\"Please check that you gave a valid number.\")\n        }\n\n        axios\n          .post(\"/api/v1/verifications\", { verification: input })\n          .then((res) => {\n            setLoading(false);\n            setSuccess(true);\n            setSubmitted(true);\n            setSuccessMessage(\n              \"Your verification request has been received. Please allow the team up to 7 working days to get back to you.\"\n            );\n          })\n          .catch((err) => {\n            console.log(`There was an error in posting`);\n            console.log(err);\n            setError(true);\n            setLoading(false);\n            setErrorMessage(\n              \"Sorry, there was an error processing your request. Please try again, or contact us @ lifelines.team@gmail.com for additional support.\"\n            );\n          });\n    }\n\n    return (\n      <div className=\"container\">\n        <h3>Request to be a Verified Clinic</h3>\n\n        <div>\n          <p>\n            As a verified clinic, you will need to assist in verification\n            requests for your clients in our database.\n          </p>\n          <p>However, you will reap the following benefits:</p>\n          <ul>\n            <li>\n              Appeals posted from your account will be more visible and trusted\n              by users with a verified badge\n            </li>\n            <li>\n              Your clients will have more options to verify their donor\n              eligibility\n            </li>\n            <li>Play a part in saving more animals' lives!</li>\n          </ul>\n          <p>\n            For Lifelines to work effectively, we require the cooperation of as\n            many veterinary clinics as possible. Hence, no matter how small your\n            clinic is, we would love to partner up.\n          </p>\n        </div>\n\n        <h3>How do I verify my clinic?</h3>\n        <div>\n          <p>We aim to make the process as easy as possible.</p>\n\n          <p>Please check the following conditions:</p>\n\n          <ul>\n            <li>You are an AVS-registered veterinary centre</li>\n            <li>\n              You are signed in with an email account associated with your\n              business. This is what we will use to verify your account.\n            </li>\n          </ul>\n\n          <p>\n            If you have fulfilled both conditions, leave a number at which we\n            can contact you at, and click on the \"Verify My Account\" button\n            below, and our team will try to verify you ASAP. If more information\n            is required, we might call or email you. If not, your account should\n            be verified in 5-7 working days.\n          </p>\n        </div>\n\n        <div className=\"row my-3\">\n          <div className=\"col-5\">\n            <label htmlFor=\"mobile\">Contact Number</label>\n            <input\n              id=\"mobile\"\n              className=\"form-control\"\n              onChange={(e) => trackInput(e.target.value, \"mobile\")}\n              name=\"mobile\"\n            />\n          </div>\n        </div>\n\n        {error && (\n          <p className=\"mt-3 text-danger\">{errorMessage}</p>\n        )}\n\n        {loading && (\n          <div>\n            <BarLoader color={\"#F5A623\"} height={4} width={100} />\n            <p className=\"mt-3 text-warning\">{loadingMessage}</p>\n          </div>\n        )}\n\n        {success && (\n          <p className=\"mt-3 text-success\">{successMessage}</p>\n        )}\n\n        <button\n          onClick={(e) => handleClick(e)}\n          className=\"btn btn-big btn-success btn-block\"\n        >\n          Verify My Account\n        </button>\n      </div>\n    );\n}\n\nexport default ClinicForm"]},"metadata":{},"sourceType":"module"}